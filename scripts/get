#!/usr/bin/env bash

source "$rvm_scripts_path/base"
source "$rvm_scripts_path/version"

get_usage()
{
  cat -v "$rvm_help_path/get"
}

#
# TODO: There is a lot of redundency in the get_X() functions, reduce it.
#

get_latest()
{
  local version_url stable_version archive current

  version_url="https://rvm.beginrescueend.com/releases/stable-version.txt"

  stable_version=$(curl -s -B $version_url)

  current=${rvm_version}

  rvm_log "\nOriginal installed RVM version:"
  (__rvm_version)

  if [ $stable_version != $current ]
  then

    [[ ! -d "$rvm_src_path" ]] && mkdir -p "$rvm_src_path/"
    [[ ! -d "$rvm_archives_path" ]] && mkdir -p "$rvm_archives_path/"

    get_version $stable_version

  else
    echo "You already have the latest version!"
  fi
}

get_version()
{
  version="$1"

  md5=$(curl -s -B https://rvm.beginrescueend.com/releases/rvm-${version}.tar.gz.md5 2>/dev/null)

  echo "rvm-${version}"

  archive="$rvm_archives_path/rvm-${version}.tar.gz"

  curl -L "https://rvm.beginrescueend.com/releases/rvm-${version}.tar.gz" \
    -o "$archive"
  case "$(uname)" in
    Darwin|FreeBSD)
      archive_md5="$(/sbin/md5 -q "${archive}")"
      ;;
    OpenBSD)
      archive_md5="$(/bin/md5 -q "${archive}")"
      ;;
    Linux|*)
      archive_md5="$(md5sum "${archive}")"
      archive_md5="${archive_md5%% *}"
      ;;
  esac

  if [[ "$archive_md5" != "$md5" ]]; then
    printf "ERROR:
    Archive package rvm-${version}.tar.gz downloaded does not match its md5 checksum ${md5}.
    Aborting RVM Installation.
  "
    exit 1
  fi

  tar zxf "${rvm_path}/archives/rvm-${version}.tar.gz" -C "$rvm_src_path/" --no-same-owner

  (
    cd "$rvm_src_path/rvm-${version}"

    chmod +x ./scripts/install

    ./scripts/install
  )

  rvm_log "\nInstalled RVM version:"
  ( source $rvm_scripts_path/rvm ; rvm --version )

  rvm_hook="after_update"

  source "$rvm_scripts_path/hook"
}

get_head()
{
  rvm_log "\nOriginal installed RVM version:"

  __rvm_version

  (
    typeset _repo _name _branch _local_branch
    case "$1" in
      (/*)
        _repo=wayneeseguin
        _branch=${1#/}
        ;;
      (*/)
        _repo=${1%/}
        _branch=master
        ;;
      (*/*)
        _repo=${1%/*}
        _branch=${1#*/}
        ;;
      (*)
        _repo=wayneeseguin
        _branch=$1
        ;;
    esac
    case ${_repo} in
      (wayneeseguin)
        _name=origin
        _local_branch=${_branch}
        ;;
      (*)
        _name=${_repo}
        _local_branch=${_repo}/${_branch}
        ;;
    esac

    [[ -d "${rvm_src_path}/rvm" ]] ||
      \mkdir -p "${rvm_src_path}/rvm"

    builtin cd "${rvm_src_path}/rvm"

    if [[ ! -d "${rvm_src_path}/rvm/.git" ]] &&
      ! git clone --depth 1 git://github.com/wayneeseguin/rvm.git $PWD &&
      ! git clone https://github.com/wayneeseguin/rvm.git $PWD
    then
      rvm_error "Could not clone master RVM repository, try \`rvm get latest\`."
      return 1
    fi

    # no warning for referencing branch that matches local and remote
    # by default first matched (local) is used and it's what we want
    git config core.warnambiguousrefs false

    if git remote | grep "^${_name}$" >/dev/null
    then
      if ! git fetch --no-tags --depth 1 ${_name}
      then
        rvm_error "Could not update RVM repository '${_name}', check your network."
        return 2
      fi

    else

      if git remote add ${_name} git://github.com/${_repo}/rvm.git &&
        git fetch --no-tags --depth 1 ${_name}
      then
        true
      elif git remote set-url ${_name} https://github.com/${_repo}/rvm.git &&
        git fetch --no-tags --depth 1 ${_name}
      then
        true
      else
        git remote rm ${_name}
        rvm_error "Could not find repository '${_repo}', check list of available repositories here https://github.com/wayneeseguin/rvm/network/members."
        return 3
      fi
    fi

    if ! git branch -r | grep " ${_name}/${_branch}$" >/dev/null
    then
      rvm_error "Branch ${_branch} does not exists at https://github.com/${_repo}/rvm/branches."
      return 4
    fi

    if ! git branch | grep " ${_local_branch}$" >/dev/null &&
      ! git branch --track --force ${_local_branch} remotes/${_name}/${_branch}
    then
      rvm_error "Could not create local branch ${_local_branch}."
      return 5
    fi

    if ! git branch | grep "\* ${_local_branch}$" >/dev/null &&
      ! git checkout --force ${_local_branch}
    then
      rvm_error "Could not checkout branch ${_local_branch}."
      return 6
    fi

    if ! git reset --hard ${_name}/${_branch}
    then
      rvm_error "Could not update to HEAD of ${_name}/${_branch}."
      return 7
    fi

    ./scripts/install

  ) || return $?

  rvm_log "\nInstalled RVM HEAD version:"
  ( source $rvm_scripts_path/rvm ; rvm --version )

  rvm_hook="after_update"
  source "$rvm_scripts_path/hook"

  return 0
}

args=($*)
action="${args[$__array_start]}"
args[$__array_start]=""
args=(${args[@]})

case "$action" in
  (latest)
    get_latest
    ;;

  (head|master)
    get_head master
    ;;

  (branch)
    get_head $2
    ;;

  ([0-9]*.[0-9]*.[0-9]*)
    get_version "$action"
    ;;

  (help)
    get_usage
    true
    ;;

  (*)
    get_usage
    false
    ;;
esac

exit $?
